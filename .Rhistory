start = 1, end = stringr::str_locate(string = strng, pattern = "~110 1")[1,1] )
vls <- sfclassic2list(strng_to_v110_1) #Should correspond to vls
#start_epoch = as.integer(lubridate::ymd_hms(vls$v16t4))
df1 <- sfclassic2df_v2(strng_to_v110_1)
start_epoch = as.integer(lubridate::ymd_hms(stringr::str_replace(df1$v16t4, "\n", "")))
## Report header
selector <- c("v1t2", "v3t1", "v3t2", "v3t5", "v3t6",
"v3t8", "v5t1" , "v6t1", "v12t4") #list of sfclassic vars we want
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
report_header <- expand_str(tibbl = selected) %>%
dplyr::mutate(., report_type = get0("v1t2", ifnotfound = NA_character_),
creation_date = get0("v12t4", ifnotfound = NA_character_),
country_code = get0("v6t1", ifnotfound = NA_integer_),
base_machine_number = get0("v3t1", ifnotfound = NA_character_),
base_machine_id = get0("v3t2", ifnotfound = NA_character_),
base_machine_manufacturer = get0("v3t5", ifnotfound = NA_character_),
base_machine_model = get0("v3t6", ifnotfound = NA_character_),
harvester_head_model = get0("v3t8", ifnotfound = NA_character_),
machine_application_verision = get0("v5t1", ifnotfound = NA_character_),
filename = str_extract(filename, pattern = "\\w*.stm")) %>%
dplyr::select(., -tidyselect::all_of(selector))
## Object definition
selector <- c( "v16t4", "v21t1", "v21t2", "v21t3", "v21t4",
"v31t1", "v31t2", "v31t3", "v31t1",
"v34t2", "v34t3", "v34t5", "v34t5", "v34t6",
"v35t1", "v35t2") #list of sfclassic vars we want
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
object_definition  <-
expand_str(tibbl = selected) %>%
dplyr::mutate(., object_name = get0("v21t1", ifnotfound = NA_character_),
object_user_id = get0("v21t1", ifnotfound = NA_character_),
object_start_date = lubridate::ymd_hms(get0("v16t4", ifnotfound = NA_character_)),
object_key = get0("start_epoch", ifnotfound = NA_integer_),
sub_object_name = get0("v21t2", ifnotfound = NA_character_),
sub_object_user_id = paste0(get0("v21t2", ifnotfound = ""),
get0("v21t3", ifnotfound = ""),
get0("v21t4", ifnotfound = "")),
sub_object_key = 0,
logging_org = paste0(get0("v31t1", ifnotfound = ""),
get0("v31t2", ifnotfound = ""),
get0("v31t3", ifnotfound = ""),
get0("v31t4", ifnotfound = ""),
get0("v31t5", ifnotfound = "")),
contractor = paste0(get0("v34t2", ifnotfound = ""),
get0("v34t3", ifnotfound = ""),
get0("v34t4", ifnotfound = ""),
get0("v34t5", ifnotfound = "")),
contract_nr = dplyr::coalesce(get0("v35t2"), get0("v35t1"))) %>%
dplyr::select(., -tidyselect::matches("v\\d", perl =T))
# Species and Product definitions
selector <- c( "v120t1", "v120t3")
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
dfx = expand_str(selected)
species_group_definition <-
dfx %>%  mutate(., species_group_name = v120t1,
species_group_user_id = paste0(v120t1, "#", v120t3, "#", stringr::str_replace( df1$v2t1, "\n", "")),
tmp_species_nr = as.integer(v120t3),
species_group_key = as.numeric(paste0(start_epoch, tmp_species_nr)))  %>%
dplyr::select(., -tidyselect::matches("v\\d", perl =T))
# Help-table of product groups
product_grp_species_nr <- rep(1:length(vls$v125t1), vls$v125t1)
product_grp_code <- integer()
for (i in 1:vls$v111t1) {
product_grp_code = c(product_grp_code, 1:vls$v125t1[i])
}
product_grp_table <-
tibble::tibble(product_grp_code,
product_grp_species_nr,
product_group_name = (expand_str(df1 %>% dplyr::select(., v127t1)) %>% dplyr::pull(.))
)
# Product definitions
selector <- c( "v121t1", "v121t2", "v126t1", "v121t6")
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
prods_per_species <- as.integer(unlist(stringr::str_split(df1$v116t1, " ")))
dfx <- expand_str(selected)
product_definition <-
dfx %>%
mutate(., product_name = v121t1,
product_info = v121t2,
v126t1 = vls$v126t1,
tmp_species_nr = rep(1:as.integer(df1$v111t1), prods_per_species),
tmp_product_nr = as.integer(1:length(v121t1)),
species_group_name = rep(dplyr::pull(expand_str(df1 %>% dplyr::select(., v120t1))), prods_per_species),
product_key = as.numeric(paste0(start_epoch, tmp_product_nr)),
species_group_key = as.numeric(paste0(start_epoch, tmp_species_nr))) %>%
dplyr::left_join(.,
product_grp_table,
by = c("tmp_species_nr" = "product_grp_species_nr",
"v126t1" = "product_grp_code")) %>%
dplyr::select(., -matches("tmp|v\\d", perl =T), matches("tmp|v\\d", perl =T))
#  filename = prifiles[1]
strng <- file2strng(filename)
View(logs)
devtools::load_all(".")
library(stanfordclassicr)
devtools::load_all(".")
lapply(c("magrittr","stringr","dplyr","tibble","lubridate"), library, character.only =T)
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
prifiles[1]
#  filename = prifiles[1]
#  filename = prifiles[1]
strng <- file2strng(filename)
filename = prifiles[1]
strng <- file2strng(filename)
#start_epoch = as.integer(lubridate::ymd_hms(vls$v16t4))
df1 <- sfclassic2df_v2(strng_to_v110_1)
#start_epoch = as.integer(lubridate::ymd_hms(vls$v16t4))
df1 <- sfclassic2df_v2(strng)
start_epoch = as.integer(lubridate::ymd_hms(stringr::str_replace(df1$v16t4, "\n", "")))
selector <- c("v1t2", "v3t1", "v3t2", "v3t5", "v3t6",
"v3t8", "v5t1" , "v6t1", "v12t4") #list of sfclassic vars we want
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
report_header <- expand_str(tibbl = selected) %>%
dplyr::mutate(., report_type = get0("v1t2", ifnotfound = NA_character_),
creation_date = get0("v12t4", ifnotfound = NA_character_),
country_code = get0("v6t1", ifnotfound = NA_integer_),
base_machine_number = get0("v3t1", ifnotfound = NA_character_),
base_machine_id = get0("v3t2", ifnotfound = NA_character_),
base_machine_manufacturer = get0("v3t5", ifnotfound = NA_character_),
base_machine_model = get0("v3t6", ifnotfound = NA_character_),
harvester_head_model = get0("v3t8", ifnotfound = NA_character_),
machine_application_verision = get0("v5t1", ifnotfound = NA_character_),
filename = str_extract(filename, pattern = "\\w*.stm")) %>%
dplyr::select(., -tidyselect::all_of(selector))
selector <- c( "v16t4", "v21t1", "v21t2", "v21t3", "v21t4",
"v31t1", "v31t2", "v31t3", "v31t1",
"v34t2", "v34t3", "v34t5", "v34t5", "v34t6",
"v35t1", "v35t2") #list of sfclassic vars we want
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
object_definition  <-
expand_str(tibbl = selected) %>%
dplyr::mutate(., object_name = get0("v21t1", ifnotfound = NA_character_),
object_user_id = get0("v21t1", ifnotfound = NA_character_),
object_start_date = lubridate::ymd_hms(get0("v16t4", ifnotfound = NA_character_)),
object_key = get0("start_epoch", ifnotfound = NA_integer_),
sub_object_name = get0("v21t2", ifnotfound = NA_character_),
sub_object_user_id = paste0(get0("v21t2", ifnotfound = ""),
get0("v21t3", ifnotfound = ""),
get0("v21t4", ifnotfound = "")),
sub_object_key = 0,
logging_org = paste0(get0("v31t1", ifnotfound = ""),
get0("v31t2", ifnotfound = ""),
get0("v31t3", ifnotfound = ""),
get0("v31t4", ifnotfound = ""),
get0("v31t5", ifnotfound = "")),
contractor = paste0(get0("v34t2", ifnotfound = ""),
get0("v34t3", ifnotfound = ""),
get0("v34t4", ifnotfound = ""),
get0("v34t5", ifnotfound = "")),
contract_nr = dplyr::coalesce(get0("v35t2"), get0("v35t1"))) %>%
dplyr::select(., -tidyselect::matches("v\\d", perl =T))
rep(1:length(df1$v125t1), as.integer(df1$v125t1))
as.integer(df1$v125t1)
rep(1:length(df1$v125t1), as.integer(stringr::str_split(df1$v125t1, " ")))
rep(1:length(df1$v125t1), as.integer(unlist(stringr::str_split(df1$v125t1, " "))))
stringr::str_split(df1$v125t1, " ")
unlist(stringr::str_split(df1$v125t1, " "))
as.integer(unlist(stringr::str_split(df1$v125t1, " ")))
1:length(df1$v125t1)
df1$v125t1
replicator <- as.integer(unlist(stringr::str_split(df1$v125t1, " ")))
product_grp_species_nr <- rep(1:length(df1$v125t1), replicator)
product_grp_species_nr <- rep(1:length(replicator), replicator)
replicator <- as.integer(unlist(stringr::str_split(df1$v125t1, " ")))
product_grp_species_nr <- rep(1:length(replicator), replicator)
product_grp_code <- integer()
for (i in 1:df$v111t1) {
product_grp_code = c(product_grp_code, 1:replicator[i])
}
replicator <- as.integer(unlist(stringr::str_split(df1$v125t1, " ")))
product_grp_species_nr <- rep(1:length(replicator), replicator)
product_grp_code <- integer()
1:df$v111t1
replicator <- as.integer(unlist(stringr::str_split(df1$v125t1, " ")))
product_grp_species_nr <- rep(1:length(replicator), replicator)
product_grp_code <- integer()
for (i in 1:as.integer(df$v111t1)) {
product_grp_code = c(product_grp_code, 1:replicator[i])
}
1:as.integer(df$v111t1)
1:as.integer(df1$v111t1)
for (i in 1:as.integer(df1$v111t1)) {
product_grp_code = c(product_grp_code, 1:replicator[i])
}
product_grp_table <-
tibble::tibble(product_grp_code,
product_grp_species_nr,
product_group_name = (expand_str(df1 %>% dplyr::select(., v127t1)) %>% dplyr::pull(.))
)
product_grp_table
selector <- c( "v121t1", "v121t2", "v126t1", "v121t6")
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
prods_per_species <- as.integer(unlist(stringr::str_split(df1$v116t1, " ")))
dfx <- expand_str(selected)
product_definition <-
dfx %>%
mutate(., product_name = v121t1,
product_info = v121t2,
v126t1 = vls$v126t1,
tmp_species_nr = rep(1:as.integer(df1$v111t1), prods_per_species),
tmp_product_nr = as.integer(1:length(v121t1)),
species_group_name = rep(dplyr::pull(expand_str(df1 %>% dplyr::select(., v120t1))), prods_per_species),
product_key = as.numeric(paste0(start_epoch, tmp_product_nr)),
species_group_key = as.numeric(paste0(start_epoch, tmp_species_nr))) %>%
dplyr::left_join(.,
product_grp_table,
by = c("tmp_species_nr" = "product_grp_species_nr",
"v126t1" = "product_grp_code")) %>%
dplyr::select(., -matches("tmp|v\\d", perl =T), matches("tmp|v\\d", perl =T))
selector <- c( "v121t1", "v121t2", "v126t1", "v121t6, v126t1")
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
prods_per_species <- as.integer(unlist(stringr::str_split(df1$v116t1, " ")))
dfx <- expand_str(selected)
product_definition <-
dfx %>%
mutate(., product_name = v121t1,
product_info = v121t2,
v126t1 = 126t1,
tmp_species_nr = rep(1:as.integer(df1$v111t1), prods_per_species),
tmp_product_nr = as.integer(1:length(v121t1)),
species_group_name = rep(dplyr::pull(expand_str(df1 %>% dplyr::select(., v120t1))), prods_per_species),
product_key = as.numeric(paste0(start_epoch, tmp_product_nr)),
species_group_key = as.numeric(paste0(start_epoch, tmp_species_nr)))
selector <- c( "v121t1", "v121t2", "v126t1", "v121t6, v126t1")
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
prods_per_species <- as.integer(unlist(stringr::str_split(df1$v116t1, " ")))
dfx <- expand_str(selected)
product_definition <-
dfx %>%
mutate(., product_name = v121t1,
product_info = v121t2,
v126t1 = v126t1,
tmp_species_nr = rep(1:as.integer(df1$v111t1), prods_per_species),
tmp_product_nr = as.integer(1:length(v121t1)),
species_group_name = rep(dplyr::pull(expand_str(df1 %>% dplyr::select(., v120t1))), prods_per_species),
product_key = as.numeric(paste0(start_epoch, tmp_product_nr)),
species_group_key = as.numeric(paste0(start_epoch, tmp_species_nr)))
selector <- c( "v121t1", "v121t2", "v126t1", "v121t6, v126t1")
selector <- selector[which(selector %in% names(df1))] # Ensure to not select vars not present
selected <- df1 %>% dplyr::select(., tidyselect::all_of(selector))
prods_per_species <- as.integer(unlist(stringr::str_split(df1$v116t1, " ")))
dfx <- expand_str(selected)
product_definition <-
dfx %>%
mutate(., product_name = v121t1,
product_info = v121t2,
v126t1 = v126t1,
tmp_species_nr = rep(1:as.integer(df1$v111t1), prods_per_species),
tmp_product_nr = as.integer(1:length(v121t1)),
species_group_name = rep(dplyr::pull(expand_str(df1 %>% dplyr::select(., v120t1))), prods_per_species),
product_key = as.numeric(paste0(start_epoch, tmp_product_nr)),
species_group_key = as.numeric(paste0(start_epoch, tmp_species_nr))) %>%
dplyr::left_join(.,
product_grp_table,
by = c("tmp_species_nr" = "product_grp_species_nr",
"v126t1" = "product_grp_code")) %>%
dplyr::select(., -matches("tmp|v\\d", perl =T), matches("tmp|v\\d", perl =T))
glimpse(product_definition)
source('~/hbdev/StanFordClassic/StanfordClassicPackage/StanFordClassicPackage/R/stm2tables.R')
CodeCodes <- c( 2,               500,            505,                 723,        724,        740,        741,        750,              760,         761,           762,           763,              764,           2001)
CodeNames <- c("species", "stemnumber", "AdaptedForBioExt", "RefDiaForDbh", "RefDiaHeigth", "dbhmm", "StemType", "OperatorNumber", "Latitude", "Lat1North2South", "Longitude", "Lon2West1East", "Altitude","Userdefined1")
Code_Name_pairs <- data.frame(Code=CodeCodes, CodeN= CodeNames)
Matches <- match(df1$v266t1, Code_Name_pairs$Code)
Code_Name_pairs_present <- Code_Name_pairs[Matches,]
TreeData <- matrix(data = df1$v267t1, ncol = df1$v265t1, byrow=T)
colnames(TreeData) = Code_Name_pairs_present$CodeN
TreeData <- as_tibble(TreeData)
#TreeData <- as.data.frame(TreeData)
#names(TreeData) <- Code_Name_pairs_present$CodeN
TreeData$StemKey = as.integer(ymd_hms(v13t4))+ TreeData$stemnumber
# .. harvested trees
CodeCodes <- c( 2,               500,            505,                 723,        724,        740,        741,        750,              760,         761,           762,           763,              764,           2001)
CodeNames <- c("species", "stemnumber", "AdaptedForBioExt", "RefDiaForDbh", "RefDiaHeigth", "dbhmm", "StemType", "OperatorNumber", "Latitude", "Lat1North2South", "Longitude", "Lon2West1East", "Altitude","Userdefined1")
Code_Name_pairs <- data.frame(Code=CodeCodes, CodeN= CodeNames)
Matches <- match(df1$v266t1, Code_Name_pairs$Code)
Code_Name_pairs_present <- Code_Name_pairs[Matches,]
str_sub(df1$v267t1, 1, 100)
df1$v265t1
TreeData <- matrix(data = as.integer(unilst(stringr::str_split(df1$v267t1))), ncol = as.integer(df1$v265t1), byrow=T)
TreeData <- matrix(data = as.integer(unlist(stringr::str_split(df1$v267t1))), ncol = as.integer(df1$v265t1), byrow=T)
TreeData <- matrix(data = as.integer(unlist(stringr::str_split(df1$v267t1, " "))), ncol = as.integer(df1$v265t1), byrow=T)
colnames(TreeData) = Code_Name_pairs_present$CodeN
Code_Name_pairs_present
# .. harvested trees
CodeCodes <- c( 2,               500,            505,                 723,        724,        740,        741,        750,              760,         761,           762,           763,              764,           2001)
CodeNames <- c("species", "stemnumber", "AdaptedForBioExt", "RefDiaForDbh", "RefDiaHeigth", "dbhmm", "StemType", "OperatorNumber", "Latitude", "Lat1North2South", "Longitude", "Lon2West1East", "Altitude","Userdefined1")
Code_Name_pairs <- data.frame(Code=CodeCodes, CodeN= CodeNames)
df1$v266t1
Matches <- match(as.integer(unlist(stringr::str_split(df1$v266t1, " "))), Code_Name_pairs$Code)
Code_Name_pairs_present <- Code_Name_pairs[Matches,]
Code_Name_pairs <- data.frame(Code=CodeCodes, CodeN= CodeNames, stringsAsFactors = F)
# .. harvested trees
CodeCodes <- c( 2,               500,            505,                 723,        724,        740,        741,        750,              760,         761,           762,           763,              764,           2001)
CodeNames <- c("species", "stemnumber", "AdaptedForBioExt", "RefDiaForDbh", "RefDiaHeigth", "dbhmm", "StemType", "OperatorNumber", "Latitude", "Lat1North2South", "Longitude", "Lon2West1East", "Altitude","Userdefined1")
Code_Name_pairs <- data.frame(Code=CodeCodes, CodeN= CodeNames, stringsAsFactors = F)
Matches <- match(as.integer(unlist(stringr::str_split(df1$v266t1, " "))), Code_Name_pairs$Code)
Code_Name_pairs_present <- Code_Name_pairs[Matches,]
Code_Name_pairs_present
TreeData <- matrix(data = as.integer(unlist(stringr::str_split(df1$v267t1, " "))), ncol = as.integer(df1$v265t1), byrow=T)
colnames(TreeData) = Code_Name_pairs_present$CodeN
TreeData <- as_tibble(TreeData)
df1$v16t4
str_remove(df1$v16t4, "\\n")
paste0(1,2)
LogData <- matrix(data =
as.integer(unlist(stringr::str_split(df1$v257t1))),
ncol = as.integer(df1$v255t1), byrow=T)
# .. Logs
LogData <- matrix(data =
as.integer(unlist(stringr::str_split(df1$v257t1, " "))),
ncol = as.integer(df1$v255t1), byrow=T)
LogData
LogData <- matrix(data =
as.integer(unlist(stringr::str_split(df1$v257t1, " "))),
ncol = as.integer(df1$v255t1), byrow=T)
# Regarding Log_CodeCodes and names: IN SF2010 code 20 would be the same as Product Key, while code 1 would not have any direct equivalent as it is not a true unique key.
Log_CodeCodes <- c(   1,               2,           20,                  201,       202,        203,          204,         205,         206,           207,              208,            300,        301,    302)
Log_CodeNames <- c("price_matrix_nr","species_nr","price_matrix_uid", "dia_top_ob","dia_top_ub","dia_mid_ob","dia_mid_ub","dia_butt_ob","dia_butt_ub","dia_hks_mid_ob","dia_hks_mid_ub","forcecut","lenght","Lenclass")
Log_CodeCodes = c(Log_CodeCodes,  400,     1400,     401,     1401,           402,      1402,          403,        1403,          404,           1404,            405,           1405,          406,         1406,          420,         421,        422,         423,           424,              425,         426,             500,       501,     600,        2000)
Log_CodeNames = c(Log_CodeNames, "vol", "voldec", "vol_sob","vol_sob_dec","vol_sub","vol_sub_dec","vol_top_ob","vol_top_ob_dec","vol_top_ub","vol_top_ub_dec","vol_smi_ob","vol_smi_ob_dec","vol_smi_ub","vol_smi_ub_dec","vol_dl", "vol_dl_sob","vol_dl_sub","vol_dl_top_ob","vol_dl_top_ub","vol_dl_smi_ob","vol_dl_smi_ub","stem_no","log_no","numoflogs","userdefined")
Log_Code_Name_pairs <- tibble(Code=Log_CodeCodes, CodeN= Log_CodeNames)
Matches <- match(v256t1, Log_Code_Name_pairs$Code)
Log_Code_Name_pairs_present <-Log_Code_Name_pairs[Matches,]
Log_Code_Name_pairs_present$Orginal <- v256t1
LogData <- as.data.frame(LogData, stringsAsFactors = F)
names(LogData) <- Log_Code_Name_pairs_present$CodeN
df1$v256t1
Matches <- match(as.integer(unlist(stringr::str_split(df1$v256t1, " "))), Log_Code_Name_pairs$Code)
Log_Code_Name_pairs_present <-Log_Code_Name_pairs[Matches,]
Log_Code_Name_pairs_present$Orginal <- v256t1
df1$v256t1
Log_Code_Name_pairs_present$Orginal <- as.integer(unlist(stringr::str_split(df1$df1$v256t1, " ")))
as.integer(unlist(stringr::str_split(df1$df1$v256t1, " ")))
unlist(stringr::str_split(df1$df1$v256t1, " "))
Log_Code_Name_pairs_present$Orginal <- as.integer(unlist(stringr::str_split(df1$v256t1, " ")))
LogData <- as.data.frame(LogData, stringsAsFactors = F)
names(LogData) <- Log_Code_Name_pairs_present$CodeN
LogData
glimpse(LogData)
logs = LogData %>%
mutate(.,
product_key = case_when(get0("pric_matrix_uid") ~  as.numeric(pric_matrix_uid),
TRUE ~
as.numeric(paste0(start_epoch, price_matrix_nr)))
)
logs = LogData %>%
mutate(.,
product_key = case_when(get0("price_matrix_uid") ~  as.numeric(pric_matrix_uid),
TRUE ~
as.numeric(paste0(start_epoch, price_matrix_nr)))
)
LogData %>%
mutate(.,
tmp_pk = coalesce( get0(pric_matrix_uid), get0(price_matrix_nr)))
LogData %>%
mutate(.,
tmp_pk = coalesce( get0("pric_matrix_uid"), get0("price_matrix_nr")))
if ("price_matrix_uid" %in% names(LogData)){
LogData$tmp_pk = LogData$price_matrix_uid
} else {LogData$tmp_pk = LogData$price_matrix_nr}
logs = LogData %>%
mutate(.,
product_key = case_when("price_matrix_uid" %in% names(LogData) ~  tmp_pk,
TRUE ~ as.numeric(paste0(start_epoch, tmp_pk))))
logs = LogData %>%
mutate(.,
product_key = case_when("price_matrix_uid" %in% names(LogData) ~  as.numeric(tmp_pk),
TRUE ~ as.numeric(paste0(start_epoch, tmp_pk))))
devtools::load_all(".")
devtools::load_all(".")
ktrfiles
ktrtest = read_ktr_file(ktrfiles[2])
devtools::document()
library(stanfordclassicr)
devtools::use_readme_rmd()
devtools::build_readme()
# stanfordclassicr
To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
# stanfordclassicr
To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
author: ""
---
# To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
---
title: "stanfordclassicr"
author: 'hb'
---
# To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
'''{r }
lapply(c("magrittr","stringr","dplyr","tibble","lubridate"), library, character.only =T)
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
stmfiles[1] ktrfiles[1] prifiles[1]
read_stm_file(stmfiles[1])
read_ktr_file(ktrfiles[1])
read_ktr_file(ktrfiles[1])
ktrtest = read_ktr_file(ktrfiles[1])
'''
---
title: "stanfordclassicr"
author: "hb"
---
# To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
# Demo
'''{r }
lapply(c("magrittr","stringr","dplyr","tibble","lubridate"), library, character.only =T)
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
stmfiles[1] ktrfiles[1] prifiles[1]
read_stm_file(stmfiles[1])
read_ktr_file(ktrfiles[1])
read_ktr_file(ktrfiles[1])
ktrtest = read_ktr_file(ktrfiles[1])
'''
---
title: "stanfordclassicr"
author: "hb"
---
# To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
# Demo
'''{r echo = F}
lapply(c("magrittr","stringr","dplyr","tibble","lubridate"), library, character.only =T)
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
stmfiles[1] ktrfiles[1] prifiles[1]
read_stm_file(stmfiles[1])
read_ktr_file(ktrfiles[1])
read_ktr_file(ktrfiles[1])
ktrtest = read_ktr_file(ktrfiles[1])
'''
---
title: "stanfordclassicr"
author: "hb"
---
# To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
# Demo
```{r echo = F}
lapply(c("magrittr","stringr","dplyr","tibble","lubridate"), library, character.only =T)
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
stmfiles[1] ktrfiles[1] prifiles[1]
read_stm_file(stmfiles[1])
read_ktr_file(ktrfiles[1])
read_ktr_file(ktrfiles[1])
ktrtest = read_ktr_file(ktrfiles[1])
```
---
title: "stanfordclassicr"
author: "hb"
---
# To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
# Demo
```{r echo = F}
lapply(c("magrittr","stringr","dplyr","tibble","lubridate"), library, character.only =T)
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
stmfiles[1] ktrfiles[1] prifiles[1]
read_stm_file(stmfiles[1])
read_ktr_file(ktrfiles[1])
read_ktr_file(ktrfiles[1])
ktrtest = read_ktr_file(ktrfiles[1])
```
# stanfordclassicr
To read StanForD classic forest machine reports
Currently the package provide functions to read .pri, .stm and .ktr files. The functions have been tested for only a few example files of each category. It is therefore likely the functions will fail and that they will need further modification to work.
## Install the current release from github:
```r
devtools::install_github("helmerbelbo/stanfordclassicr")
files = list.files(system.file("extdata", package = "stanfordclassicr"), full.names = T)
stmfiles = files[stringr::str_detect(files, ".stm")]
prifiles = files[stringr::str_detect(files, ".pri")]
ktrfiles = files[stringr::str_detect(files, ".ktr")]
stmfiles[1]
ktrfiles[1]
prifiles[1]
read_stm_file(stmfiles[1])
read_ktr_file(ktrfiles[1])
read_ktr_file(ktrfiles[1])
ktrtest = read_ktr_file(ktrfiles[1])
```
## Install the development version from GitHub:
```r
devtools::install_github('topepo/caret/pkg/caret')
